{"version":3,"sources":["components/DessertCard/index.js","components/Wrapper/index.js","components/Nav/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["DessertCard","state","isClicked","twoFunctions","_this","console","log","props","resetGame","setState","handleIncrement","id","_this2","this","react_default","a","createElement","className","alt","name","src","image","onClick","React","Component","Wrapper","children","Nav","href","instructions","currentScore","Title","App","count","welcome","desserts","topScore","shuffle","array","sort","Math","random","setTimeout","_this3","components_Wrapper","components_Nav","role","arial-labellby","components_Title","map","dessert","components_DessertCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s1BAoEeA,0NA9DbC,MAAQ,CACNC,WAAW,KAGbC,aAAe,WAMVC,EAAKH,MAAMC,WAEZG,QAAQC,IAAI,kBACZF,EAAKG,MAAMC,YACXJ,EAAKK,SAAS,CAAEP,WAAW,MAG3BE,EAAKK,SAAS,CAAEP,WAAW,IAE3BG,QAAQC,IAAIF,EAAKH,MAAMC,WACvBE,EAAKG,MAAMG,gBAAgBN,EAAKG,MAAMI,8EAMjC,IAAAC,EAAAC,KAOP,OANGA,KAAKZ,MAAMC,WAEZG,QAAQC,IAAIO,KAAKN,OAKjBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAKbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,KAAKN,MAAMY,KAAMC,IAAKP,KAAKN,MAAMc,MAAOC,QAAS,kBAAMV,EAAKT,4BA1CxDoB,IAAMC,kBCEjBC,MAJf,SAAiBlB,GACf,OAAOO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWV,EAAMmB,iBCqB1BC,MAtBf,SAAapB,GACT,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeW,KAAK,wBAE5BrB,EAAMmB,UAEXZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACfV,EAAMsB,cAEPf,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UACOH,EAAAC,EAAAC,cAAA,cAAST,EAAMuB,wBCRvBC,MAJf,SAAexB,GACb,OAAOO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASV,EAAMmB,kBCmFvBM,6MAvEb/B,MAAQ,CACNgC,MAAO,EACPC,QAAS,uBACTC,WACAC,SAAU,KAYZ1B,gBAAkB,WAEdN,EAAKK,SAAS,CAAEwB,MAAO7B,EAAKH,MAAMgC,MAAQ,EAAGE,SAAS/B,EAAKiC,QAAQF,KAGnE9B,QAAQC,IAAIF,EAAKH,MAAMgC,UAG3BG,SAAW,WACNhC,EAAKH,MAAMgC,MAAQ7B,EAAKH,MAAMmC,UAC/BhC,EAAKK,SAAS,CAAE2B,SAAUhC,EAAKH,MAAMgC,WAKzCzB,UAAY,WACVJ,EAAKK,SAAS,CAAEwB,MAAO,IAEvB5B,QAAQC,IAAI,+BAGd+B,QAAU,SAACC,GAET,OADAA,EAAMC,KAAK,kBAAMC,KAAKC,SAAU,KACzBH,sFAhCW,IAAA1B,EAAAC,KAClB6B,WAAW,WACT9B,EAAKH,SAAS,CAACyB,QAAS,6DACvB,sCAgCI,IAAAS,EAAA9B,KAEP,OACEC,EAAAC,EAAAC,cAAC4B,EAAD,KAEA9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAKf,aAAcjB,KAAKZ,MAAMgC,MAAOJ,aAAchB,KAAKZ,MAAMiC,SAA9D,eAGApB,EAAAC,EAAAC,cAAA,QAAM8B,KAAK,MAAMC,iBAAgB,kBAE/BjC,EAAAC,EAAAC,cAACgC,EAAD,iBAECb,EAASc,IAAI,SAAAC,GAAO,OACnBpC,EAAAC,EAAAC,cAACmC,EAAD,CAEAxC,GAAIuC,EAAQvC,GACZyC,IAAKF,EAAQvC,GACbU,MAAO6B,EAAQ7B,MACfX,gBAAiBiC,EAAKjC,gBACtBF,UAAWmC,EAAKnC,sBAjERe,IAAMC,WCAJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fbad461e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n// function DessertCard(props) {\nclass DessertCard extends React.Component {\n  state = {\n    isClicked: false\n  };\n\n  twoFunctions = () => {\n    //console.log(this.state.isClicked);\n    //this.setState({ isClicked: \"true\" });\n    //console.log(this.state.isClicked);\n    //onClick add one to score\n    //on Click change default value to true\n    if(this.state.isClicked) {\n      //create resetGame in app.js\n      console.log(\"resetting game\");\n      this.props.resetGame();\n      this.setState({ isClicked: false})\n      // this.props.isClicked=true\n    } else {\n      this.setState({ isClicked: true })\n      //this.setState({ count: this.state.count + 1});\n      console.log(this.state.isClicked);\n      this.props.handleIncrement(this.props.id);\n    }\n  };\n\n  \n\n  render() {\n    if(this.state.isClicked)\n    {\n      console.log(this.props);\n    }\n    \n    //this.setState({isClicked: this.props.isClicked});\n    return (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <div className=\"img-container\">\n            {/* commented out line 11 to test line handling increments & pushing into new array */}\n            {/* default value set to false */}\n            {/* <img value={props.isClicked} alt={props.name} src={props.image} onClick={() => twoFunctions()}/> */}\n            {/* <img value={this.state.isClicked} alt={this.props.name} src={this.props.image} onClick={() => this.twoFunctions()}/> */}\n            <img alt={this.props.name} src={this.props.image} onClick={() => this.twoFunctions()}/>\n            {/* test did not work. Check syntax */}\n            {/* <img alt={props.name} src={props.image} onClick={() => \n            (\n              props.handleIncrement\n              props.pushIntoNewArray(props.id)\n\n            ) \n            }/> */}\n          </div>\n          {/* <button className=\"btn btn-primary\" onClick={this.handleIncrement}>\n          Increment\n          </button> */}\n          {/* <p>Click Count: {props.handleIncrement}</p> */}\n        </div>\n      </div>\n    );\n  };\n}\n\n\nexport default DessertCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar sticky-top\">\n            <a className=\"navbar-brand\" href=\"https://reactjs.org/\">\n                {/* <img src=\"/docs/4.0/assets/brand/bootstrap-solid.svg\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\"> */}\n                {props.children}\n            </a>\n            <span className=\"instructions\">\n            {props.instructions}\n            </span>\n            <ul>\n                <li className=\"score\">\n                Score: <strong>{props.currentScore}</strong>\n                </li>\n                {/* <li>\n                ⌇ Top Score: {props.topScore}\n                </li> */}\n            </ul>\n        </nav>\n    ); \n};\n\nexport default Nav;\n\n\n\n\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport DessertCard from \"./components/DessertCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport desserts from \"./desserts.json\";\n\n\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass App extends React.Component {\n// function App() {\n\n  // Setting the initial state of the Counter component\n  state = {\n    count: 0,\n    welcome: \"CLICK! CLICK! CLICK!\",\n    desserts,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({welcome: \" 🍩 Do not click a desset twice! 🍮\"});\n    }, 3000);\n  }\n\n  // DOCUMENTATION: \"We only use this.state in the constructors\"\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = () => {\n      // We always use the setState method to update a component's state\n      this.setState({ count: this.state.count + 1, desserts:this.shuffle(desserts)\n        // clicked: true\n      });\n      console.log(this.state.count);\n  };\n\n  topScore = () => {\n    if(this.state.count > this.state.topScore) {\n      this.setState({ topScore: this.state.count});\n    }\n  }\n\n  //reset game\n  resetGame = () => {\n    this.setState({ count: 0});\n    //reset image value to false \n    console.log(\"resetting game at app js\")\n  };\n\n  shuffle = (array) => {\n    array.sort(() => Math.random()- 0.5)\n    return array;\n  };\n\n  render() {\n    //console.log(\"im calling render again\");\n    return (\n      <Wrapper>\n      {/* setState(INSTRUCTIONS) 😎 */}\n      <Nav currentScore={this.state.count} instructions={this.state.welcome}> \n      {/* <Nav currentScore={this.state.count}>  */}\n      Clicky Game! \n      <span role=\"img\" arial-labellby= \"🍩\" />\n      </Nav>\n        <Title>Desserts</Title>\n        {/* The map() method takes in desserts array & creates a new array */}\n        {desserts.map(dessert => (\n          <DessertCard\n          // initializeNewArray={this.pushIntoNewArray}\n          id={dessert.id}\n          key={dessert.id}\n          image={dessert.image} \n          handleIncrement={this.handleIncrement}\n          resetGame={this.resetGame}\n          //register click: commented out button below each image(to be deleted)\n          // ClickCount={this.state.count}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// App is the root of our component tree\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}